//
//  LKLocationManager.m
//  HouseKeeper
//
//  Created by sunny on 2018/7/13.
//  Copyright © 2018年 heshenghui. All rights reserved.
//

#import "LKLocationManager.h"


@interface LKLocationManager ()
/** 定位返回结果 */
@property (nonatomic, copy) void(^responseLocationResult)(LKLocationModel *locationModel);
/** 当前定位置 */
@property (nonatomic, strong) CLLocation *currentLocation;
@property (nonatomic, assign) CLLocationDegrees longitude;
@property (nonatomic, assign) CLLocationDegrees latitude;

@end

@implementation LKLocationManager
//LKSingletonM(LKLocationManager)

+ (void)getResposeLocation:(void(^)(LKLocationModel *locationModel)) locationResult {
    LKLocationManager *manager = [[LKLocationManager alloc] init];
    manager.responseLocationResult = locationResult;
    [manager getLocation];
//    [LKLocationManager sharedLKLocationManager].responseLocationResult = locationResult;
//    [[LKLocationManager sharedLKLocationManager] getLocation];
}
- (void)getLocation {
    if ([CLLocationManager locationServicesEnabled]) {
        //  判断用户是否允许程序获取位置权限
        if ([CLLocationManager authorizationStatus] == kCLAuthorizationStatusAuthorizedWhenInUse || [CLLocationManager authorizationStatus] == kCLAuthorizationStatusAuthorizedAlways) {
            self.locationManager.delegate = self;
            [self.locationManager requestWhenInUseAuthorization];
            [self.locationManager startUpdatingLocation];
        }else {
            //用户拒绝开启用户权限
            [Dialog showCustomAlertViewWithTitle:@"提示" message:@"请开启定位，以便访问您的位置信息" firstButtonName:@"取消" secondButtonName:@"确定" dismissHandler:^(NSInteger index) {
                if (index == 1) { /// 去设置
                    NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                    if( [[UIApplication sharedApplication] canOpenURL:url] ) {
                        [[UIApplication sharedApplication] openURL:url];
                    }
                }
            }];
        }
    }else {
        [Dialog showCustomAlertViewWithTitle:@"提示" message:@"请开启定位，以便访问您的位置信息" firstButtonName:@"取消" secondButtonName:@"确定" dismissHandler:^(NSInteger index) {
            if (index == 1) { /// 去设置
                NSURL *url = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
                if( [[UIApplication sharedApplication] canOpenURL:url] ) {
                    [[UIApplication sharedApplication] openURL:url];
                }
            }
        }];
    }
}

- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status{
    
    
    
}
- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray<CLLocation *> *)locations {
//    [self.locationManager stopUpdatingHeading];
    self.currentLocation = [locations lastObject];
    self.longitude = _currentLocation.coordinate.longitude;
    self.latitude = _currentLocation.coordinate.latitude;
    
    //这里的代码是为了判断didUpdateLocations调用了几次 有可能会出现多次调用 为了避免不必要的麻烦 在这里加个if判断 如果大于1.0就return
    NSTimeInterval locationAge = -[self.currentLocation.timestamp timeIntervalSinceNow];
    if (locationAge > 1.0){//如果调用已经一次，不再执行
        return;
    }
    
    
    CLGeocoder *geoCoder = [[CLGeocoder alloc] init];
    [geoCoder reverseGeocodeLocation:self.currentLocation completionHandler:^(NSArray<CLPlacemark *> * _Nullable placemarks, NSError * _Nullable error) {
        if (placemarks.count > 0) {
            CLPlacemark *placeMark = placemarks[0];
            NSString *currentCity = placeMark.locality;
            if (!currentCity) {
                currentCity = placeMark.administrativeArea;
            }
            if (!currentCity) {
                currentCity = nil;
                if (self.responseLocationResult != nil) {
                    self.responseLocationResult(nil);
                }
            }else {
                if (self.responseLocationResult != nil) {
                    LKLocationModel *model = [[LKLocationModel alloc] init];
                    model.currentLocation = self.currentLocation;
                    model.longitude = self.longitude;
                    model.latitude = self.latitude;
                    model.currentCity = currentCity;
                    model.subLocality = placeMark.subLocality;
                    model.thoroughfare = placeMark.thoroughfare;
                    model.name = placeMark.name;
                    self.responseLocationResult(model);
                }
            }
        }
    }];
    
}
- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error {
    DLog(@"%@",error.localizedDescription);
    if (self.responseLocationResult != nil) {
        self.responseLocationResult(nil);
    }
}
- (CLLocationManager *)locationManager {
    if (_locationManager == nil) {
        _locationManager = [[CLLocationManager alloc] init];
        _locationManager = [[CLLocationManager alloc] init];
        _locationManager.desiredAccuracy = kCLLocationAccuracyBest;
        _locationManager.distanceFilter = 1.0;
        _locationManager.delegate = self;
    }
    return _locationManager;
}
@end


@implementation LKLocationModel


@end

