//
//  LKSearchCommunityResultVC.m
//  HouseKeeper
//
//  Created by sunny on 2018/7/20.
//  Copyright © 2018年 heshenghui. All rights reserved.
//

#import "LKSearchCommunityResultVC.h"
#import "LKSearchBar.h"
#import "LKSearchCommunityResultViewModel.h"
#import "LKSearchCommunityBottomView.h"
#import "LKCheckSearchCommunityVC.h"
#import <IQKeyboardManager/IQKeyboardManager.h>
#import "LKRegisterPerfectInformationVC.h"

@interface LKSearchCommunityResultVC ()<UITextFieldDelegate>
@property (nonatomic, strong) LKSearchBar *searchBar;

@property (nonatomic, strong) LKSearchCommunityResultViewModel *communityResultViewModel;
@property (nonatomic, strong) LKSearchCommunityBottomView *bottomView;

@end

@implementation LKSearchCommunityResultVC
-(void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [IQKeyboardManager sharedManager].enableAutoToolbar = NO;
}
- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    [IQKeyboardManager sharedManager].enableAutoToolbar = YES;
}
- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    [self keyboardHandle];
    [self createUI];
    [self bindViewModelData];
}

- (void)bindViewModelData {
    @weakify(self);
    
    [self.communityResultViewModel.loadCommunityDataSubject subscribeNext:^(id  _Nullable x) {
        @strongify(self);
        BOOL isHasData = self.communityResultViewModel.dataArray.count > 0 ? YES:NO;
        [self.view configBlankPage:EaseBlankPageTypeNoButton_community hasData:isHasData hasError:NO reloadButtonBlock:^(id sender) {
            
        }];
        [self.communityResultViewModel changeSelectDataArray:self.selectCommunityArray];
        [self.bottomView bindDataSelectCountCommunity:self.selectCommunityArray.count];
        [self.mainTableView reloadData];
    }];
    [self.communityResultViewModel.changeCommunitySubject subscribeNext:^(id  _Nullable x) {
        [self.mainTableView reloadData];
    }];
    //获取城市列表
    self.communityResultViewModel.requestUrl = LKBrunchList;
    self.communityResultViewModel.requestTag =  1;
    [self.communityResultViewModel.selectCommunitySubject subscribeNext:^(NSMutableArray *  _Nullable communityArray) {
        @strongify(self);
        self.selectCommunityArray = communityArray;
        [self.bottomView bindDataSelectCountCommunity:self.selectCommunityArray.count];
    }];
    [[[self.searchBar.searchTextField rac_textSignal] skip:1]  subscribeNext:^(NSString * _Nullable x) {
        @strongify(self);
        if ([self.regionId isEqualToString:@"0"] || [LKCustomTool isBlankString:self.regionId]) {
            self.communityResultViewModel.requestDict = @{@"name":x};
        }else {
            self.communityResultViewModel.requestDict = @{@"name":x,@"regionId":self.regionId};
        }
    }];
}
- (void)keyboardHandle {
    @weakify(self);
    [[[NSNotificationCenter defaultCenter] rac_addObserverForName:UIKeyboardWillShowNotification object:nil] subscribeNext:^(NSNotification * _Nullable not) {
        @strongify(self);
        //取出键盘最终的frame
        CGFloat keyboardHeight = [not.userInfo[UIKeyboardFrameEndUserInfoKey] CGRectValue].size.height;
        double duration = [not.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];
        [UIView animateWithDuration:duration animations:^{
            [self.bottomView mas_remakeConstraints:^(MASConstraintMaker *make) {
                make.bottom.equalTo(self.view.mas_bottom).offset(-keyboardHeight);
                make.left.mas_equalTo(0);
                make.width.mas_equalTo(kScreen_Width);
                make.height.mas_equalTo(50);
            }];
        }];
        [self.view layoutIfNeeded];
    }];
    
    [[[NSNotificationCenter defaultCenter] rac_addObserverForName:UIKeyboardWillHideNotification object:nil] subscribeNext:^(NSNotification * _Nullable not) {
        @strongify(self);
        //取出键盘最终的frame
        double duration = [not.userInfo[UIKeyboardAnimationDurationUserInfoKey] doubleValue];
        [UIView animateWithDuration:duration animations:^{
            [self.bottomView mas_remakeConstraints:^(MASConstraintMaker *make) {
                if (@available(iOS 11.0, *)) {
                    make.bottom.equalTo(self.view.mas_safeAreaLayoutGuideBottom);
                } else {
                    // Fallback on earlier versions
                    make.bottom.equalTo(self.view.mas_bottom);
                }
                make.left.mas_equalTo(0);
                make.width.mas_equalTo(kScreen_Width);
                make.height.mas_equalTo(50);
            }];
        }];
        [self.view layoutIfNeeded];
    }];
}
- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    [textField resignFirstResponder];
    DLog(@"搜索");
    self.communityResultViewModel.requestDict = @{@"name":textField.text,@"regionId":self.regionId};
    return YES;
}
#pragma mark - UI
- (void)createUI {
    UIView *titleView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, kScreen_Width - 100, kNavBarHeight)];
    [titleView addSubview:self.searchBar];
    [self addTitleViewWithTitle:titleView];
    [self.searchBar mas_makeConstraints:^(MASConstraintMaker *make) {
        make.left.mas_equalTo(0);
        make.right.equalTo(titleView.mas_right);
        make.width.mas_equalTo(kScreen_Width - 100);
        make.height.mas_equalTo(28);
        make.top.mas_equalTo((kNavBarHeight-28)/2.0f);
    }];
    self.mainTableView.rowHeight = 50.f;
    [self createBottomView];
    
    [self.mainTableView mas_remakeConstraints:^(MASConstraintMaker *make) {
        make.top.left.mas_equalTo(0);
        make.width.mas_equalTo(kScreen_Width);
        make.bottom.equalTo(self.bottomView.mas_top);
    }];
}

- (void)createBottomView {
    [self.view addSubview:self.bottomView];
    [self.bottomView mas_makeConstraints:^(MASConstraintMaker *make) {
        if (@available(iOS 11.0, *)) {
            make.bottom.equalTo(self.view.mas_safeAreaLayoutGuideBottom);
        } else {
            // Fallback on earlier versions
            make.bottom.equalTo(self.view.mas_bottom);
        }
        make.left.mas_equalTo(0);
        make.width.mas_equalTo(kScreen_Width);
        make.height.mas_equalTo(50);
    }];
    [self.bottomView bindDataSelectCountCommunity:self.selectCommunityArray.count];
    @weakify(self);
    self.bottomView.checkSelectCommunity = ^{
        @strongify(self);
        LKCheckSearchCommunityVC *vc = [[LKCheckSearchCommunityVC alloc] init];
        vc.selectCommunityArray = self.selectCommunityArray;
        [self.navigationController pushViewController:vc animated:YES];
        @weakify(self);
        [vc.checkSureSelectSubject subscribeNext:^(NSMutableArray * _Nullable checkSelectCommunityArray) {
            @strongify(self);
            [self.communityResultViewModel changeSelectDataArray:checkSelectCommunityArray];
            self.selectCommunityArray = checkSelectCommunityArray;
            [self.bottomView bindDataSelectCountCommunity:self.selectCommunityArray.count];
        }];
    };
    self.bottomView.sureBtnClick = ^{
        @strongify(self);
//        [self.sureSelectSubject sendNext:self.selectCommunityArray];
        [[NSNotificationCenter defaultCenter] postNotificationName:@"searchResultSureSelectCommunity" object:self.selectCommunityArray];
        UINavigationController *navVC = self.navigationController;
        NSMutableArray *viewControllers = [[NSMutableArray alloc] init];
        for (UIViewController *vc in [navVC viewControllers]) {
            [viewControllers addObject:vc];
            if ([vc isKindOfClass:[LKRegisterPerfectInformationVC class]]) {
                break;
            }
        }
        [navVC setViewControllers:viewControllers animated:YES];
    };
}
- (void)backAction:(id)sender {
    [self.sureSelectSubject sendNext:self.selectCommunityArray];
    [super backAction:sender];
}
-(Class)tableCellClass {
    return [LKSearchCommunityCell class];
}
- (LKBaseTableViewModel *)createDataSource
{
    return self.communityResultViewModel;
}
#pragma mark - lazy
- (LKSearchCommunityResultViewModel *)communityResultViewModel {
    if (_communityResultViewModel == nil) {
        _communityResultViewModel = [[LKSearchCommunityResultViewModel alloc] init];
    }
    return _communityResultViewModel;
}

- (LKSearchCommunityBottomView *)bottomView {
    if (_bottomView == nil) {
        _bottomView = [[LKSearchCommunityBottomView alloc] init];
    }
    return _bottomView;
}
- (NSMutableArray *)selectCommunityArray {
    if (_selectCommunityArray == nil) {
        _selectCommunityArray = [NSMutableArray array];
    }
    return _selectCommunityArray;
}
- (LKSearchBar *)searchBar {
    if (_searchBar == nil) {
        _searchBar = [[LKSearchBar alloc] init];
        _searchBar.backgroundColor = LKF7Color;
        _searchBar.searchTextField.placeholder = @"输入小区名称搜索";
        _searchBar.searchTextField.delegate = self;
    }
    return _searchBar;
}
- (RACSubject *)sureSelectSubject {
    if (_sureSelectSubject == nil) {
        _sureSelectSubject = [RACSubject subject];
    }
    return _sureSelectSubject;
}
@end
